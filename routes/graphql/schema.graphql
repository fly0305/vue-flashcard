#import deck/*.graphql
#import card/*.graphql
#import user/*.graphql
#import auth.graphql
"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

#Think of queries as REST resources which can take arguments and return a fixed result.

type User {
    id: Int!,
    username: String!
    email: String!
    cards_count: Int! @count(relation: "cards")
    decks: [Deck!]! @hasMany
    cards: [Card!]! @hasMany @lazyLoad(relations: ["cards"])
}

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    profile(username: String! @eq): User @find
    deck(id: ID @eq): Deck @find
    me: User! @middleware(checks:["auth:api"]) @auth(guard: "api")
    user(username: String! @eq): User @find
}


input LoginInput {
      login: String
      password: String
}

input RegisterInput {
    email: String
    password: String
    password_confirmation: String
}

type LoginResponse {
     access_token: String!
     refresh_token: String!
     expires_in: Int!
}

type LogoutResponse {
    status: String!
    message: String
}


type Mutation @middleware(checks: ["auth:api"]) {
      logout: LogoutResponse!
      @field(resolver: "App\\GraphQL\\Resolvers\\AuthResolver@logout")

      editProfile(
          id: Int!
          username: String
          email: String
          password: String
          ): User @update @editProfile

          removeProfile(
          id: Int!
          ): User @delete




}

extend type Mutation {
    login(data: LoginInput @spread): LoginResponse!
    @field(resolver: "App\\GraphQL\\Resolvers\\AuthResolver@login")

refresh_token(refresh: Boolean): LoginResponse!
    @field(resolver: "App\\GraphQL\\Resolvers\\AuthResolver@refresh_token")

    register(data:
        RegisterInput @spread
    ): Boolean!
    @field(resolver: "App\\GraphQL\\Resolvers\\AuthResolver@register")
}
