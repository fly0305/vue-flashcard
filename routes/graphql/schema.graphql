#import deck/*.graphql
#import card/*.graphql
#import user/*.graphql
#import auth.graphql
"Can be used as an argument to upload files"
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")


"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

#Think of queries as REST resources which can take arguments and return a fixed result.

type Language {
    id: Int!
    locale: String!
    name: String!
}


type User {
    id: Int!
    username: String!
    email: String!
    created_at: String!
    cards_count: Int! @count(relation: "publishedCards")
    decks: [Deck!]! @hasMany @lazyLoad(relations: ["decks"])
    cards: [Card!]! @hasMany @lazyLoad(relations: ["cards"])
}

type AuthUser @modelClass(class: "\\App\\User") {
    id: Int!
    username: String!
    email: String!
    editable: Boolean
    cards_count: Int! @count(relation: "cards")
    decks: [Deck!]! @hasMany(relation: "userDecks", scopes: ["OrderByVisibility"]) @lazyLoad(relations: ["userDecks"])
    cards: [Card!]! @hasMany @lazyLoad(relations: ["cards"])
}

union Person @union(resolveType: "App\\GraphQL\\Unions\\PersonUnion") = AuthUser | User


type Query {
    profile(username: String!): Person @field(resolver: "App\\GraphQL\\Queries\\ProfileQuery")
    usersTotal: Int! @count(model: "User")
    decksTotal: Int! @count(model: "Deck")
    cardsTotal: Int! @count(model: "Card")
    users: [User!]! @paginate(scopes: ["Newest"])
    user(username: String! @eq): User @find
    languages: [Language!]! @all
    deck(slug: String! @eq): Deck @find(scopes: ["WithoutScopes"]) @able(ability: "view", find: "slug")
    me: User @middleware(checks:["auth:api"]) @auth
    decks(search: String @search, filter: [FilterClause!] @filter): [Deck!]! @paginate(model: "App\\Deck",defaultCount: 12)
    languages: [Language!]! @all
    translate(input: TranslateInput! @spread): String! @field(resolver: "App\\GraphQL\\Queries\\TranslateQuery")
    image(input: ImageInput! @spread): String! @field(resolver: "App\\GraphQL\\Queries\\ImageQuery")
    example(input: TranslateInput! @spread): [String!]! @field(resolver: "App\\GraphQL\\Queries\\ExampleQuery")
}


input ImageInput {
    phrase: String!
    source: String!
}

input TranslateInput {
    phrase: String!
    source: String!
    target: String!
}

input FilterClause{
    field: String!
    order: FilterOrder!
    random: Int
    orderByCount: CountInput
}


enum FilterOrder {
    ASC
    DESC
    RAND
}

input CountInput {
    model: String!
    relation: String!
}


input LoginInput {
      login: String
      password: String
}

input RegisterInput {
    email: String
    password: String
    password_confirmation: String
}

type LoginResponse {
     access_token: String!
     refresh_token: String!
     expires_in: DateTime!
     user: User!
}

type RefreshResponse {
     access_token: String!
     refresh_token: String!
     expires_in: DateTime!
}

type LogoutResponse {
    status: String!
    message: String
}


type Mutation @middleware(checks: ["auth:api"]) {

      editProfile(
          id: Int!
          username: String
          email: String
          password: String
          password_confirmation: String
          ): User @editProfileRules @update @able(ability: "update", find: "id")

          removeProfile(
          id: Int!
          ): User @delete @able(ability: "delete", find: "id")

  createDeck(input: CreateDeckInput! @spread): Deck! @field(resolver: "App\\GraphQL\\Mutations\\DeckMutator@createDeck") @able(ability: "create")

            updateDeck(input: UpdateDeckInput! @spread): Deck! @field(resolver: "App\\GraphQL\\Mutations\\UpdateDeckMutator@updateDeck") @able(ability: "update", find: "id")
          removeDeck(id: ID!): Deck! @field(resolver: "App\\GraphQL\\Mutations\\RemoveDeckMutator") @able(ability: "delete", find: "id")

}



extend type Mutation {

          logout: LogoutResponse!
      @field(resolver: "App\\GraphQL\\Resolvers\\AuthResolver@logout")

    login(data: LoginInput @spread): LoginResponse!
    @field(resolver: "App\\GraphQL\\Resolvers\\AuthResolver@login")

refresh_token(refresh: Boolean): RefreshResponse!
    @field(resolver: "App\\GraphQL\\Resolvers\\AuthResolver@refresh_token")

    register(data:
        RegisterInput @spread
    ): LoginResponse!
    @field(resolver: "App\\GraphQL\\Resolvers\\AuthResolver@register")
}

input CreateDeckInput {
    title: String
    description: String
    lang_source_id: Int
    lang_target_id: Int
    visibility: Visibility
    image: String
    image_file: Upload
    cards: [CreateCardInput!]
}

input CreateCardInput {
    question: String
    answer: String
    example_question: String
    example_answer: String
    image: String
    image_file: Upload
}

input UpdateDeckInput {
    id: ID!
    title: String
    description: String
    lang_source_id: Int
    lang_target_id: Int
    visibility: Visibility
    image: String
    image_file: Upload
    cards: [UpdateCardInput!]
    cardsForDelete: [Int!]
}

input UpdateCardInput {
    id: ID
    question: String
    answer: String
    example_question: String
    example_answer: String
    image: String
    image_file: Upload
}
