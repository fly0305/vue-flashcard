#import deck/*.graphql
#import card/*.graphql
#import user/*.graphql
#import auth.graphql
"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

#Think of queries as REST resources which can take arguments and return a fixed result.
type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    deck(id: ID @eq): Deck @find
}
#In contrast to the Query type, the fields of the Mutation type are allowed to change data on the server.
# type Mutation {
#   createUser(name: String!, email: String!, password: String!): User
#   updateUser(id: ID, email: String, password: String): User
#   deleteUser(id: ID): User
# }


#Rather than providing a single response, the fields of the Subscription type return a stream of responses, with real-time updates.
# type Subscription {
#   newUser: User
# }

# input LoginInput {
#       username: String @rules(apply: ["required_without:data.email", "string", "nullable", "exists:users,username"])
#       email: String @rules(apply: ["required_without:data.username", "string", "nullable", "exists:users,email"])
#       password: String! @rules(apply: ["required", "string"])
# }

input LoginInput {
      login: String!
      password: String! @rules(apply: ["required", "string"])
}

input RegisterInput {
    email: String! @rules(apply: ["required", "string", "email", "max:255", "unique:users,email"])
    password: String! @rules(apply: ["required", "string", "min:6"]) @bcrypt
}

# type LoginResponse {}

type LogoutResponse {
    status: String!
    message: String
}

type Mutation {
    login(data: LoginInput @spread): String!
    @field(resolver: "AuthMutator@login")

  register(data: RegisterInput!): Boolean! @field(resolver: "AuthMutator@register")

  logout: LogoutResponse! @protect(guards: ["api"]) @field(resolver: "AuthMutator@logout")
}
